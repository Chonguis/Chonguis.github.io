{"version":3,"sources":["components/Form/countries.tsx","components/Form/FormContainer.tsx","components/DisplayResults/Result.tsx","components/DisplayResults/DisplayResults.tsx","components/SubmittedFormPanel/SubmittedFormPanel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["allCountries","statesArray","inputsData","id","label","Form","props","onChangeInput","event","setState","state","target","value","onChangeSelect","country","inputsHTML","forEach","data","push","className","Autocomplete","options","sort","onChange","renderInput","params","TextField","variant","this","submitted","onSubmit","e","onSubmitForm","type","disabled","style","marginTop","display","href","Component","Result","console","log","numberWithCommas","x","replace","DisplayResults","deathRatio","recoveredRatio","activeRatio","stateDeathRatio","fetchState","total_cases","total_deaths","parseFloat","Math","round","toFixed","active_cases","total_recovered","death_cases","cases_number","activeSearch","state_name","record_date","death_record_date","country_name","SubmittedFormPanel","undefined","cases_record_date","new_cases","new_deaths","total_cases_per1m","nextProps","formState","JSON","stringify","fetch","then","res","json","usa_cases_by_state","length","usa_deaths","alert","catch","err","latest_stat_by_country","latest_stats","React","App","preventDefault","other","Object","keys","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.15287f86.chunk.js","sourcesContent":["export const countriesByContinent: {\n    [key: string]: string[];\n} = {\n    'Africa': ['Algeria','Angola','Benin','Botswana','Burkina Faso','Burundi','Cabo Verde','Cameroon','Central African Republic','Chad','Comoros','Democratic Republic of the Congo','Republic of the Congo','Cote d\\'Ivoire','Djibouti','Egypt','Equatorial Guinea','Eritrea','Ethiopia','Gabon','Gambia','Ghana','Guinea','Guinea Bissau','Kenya','Lesotho','Liberia','Libya','Madagascar','Malawi','Mali','Mauritania','Mauritius','Morocco','Mozambique','Namibia','Niger','Nigeria','Rwanda','Sao Tome and Principe','Senegal','Seychelles','Sierra Leone','Somalia','South Africa','South Sudan','Sudan','Swaziland','Tanzania','Togo','Tunisia','Uganda','Zambia','Zimbabwe'],\n    'North America': ['Antigua and Barbuda','Bahamas','Barbados','Belize','Canada','Costa Rica','Cuba','Dominica','Dominican Republic','El Salvador','Grenada','Guatemala','Haiti','Honduras','Jamaica','Mexico','Nicaragua','Panama', 'Puerto Rico', 'Saint Kitts and Nevis','Saint Lucia','Saint Vincent and the Grenadines','Trinidad and Tobago','United States of America'],\n    'South America': ['Argentina', 'Bolivia','Brazil','Chile','Colombia','Ecuador','Guyana','Paraguay','Peru','Suriname','Uruguay','Venezuela'],\n    'Europe': ['Albania','Andorra','Armenia','Austria','Azerbaijan','Belarus','Belgium','Bosnia and Herzegovina','Bulgaria','Croatia','Cyprus','Czech Republic','Denmark','Estonia','Finland','France','Georgia','Germany','Greece','Iceland','Ireland','Italy','Kazakhstan','Kosovo','Latvia','Liechtenstein','Lithuania','Luxembourg','Macedonia','Malta','Moldova','Monaco','Montenegro','Netherlands','Norway','Poland','Portugal','Romania','Russia','San Marino','Serbia','Slovakia','Slovenia','Spain','Sweden','Switzerland','Turkey','Ukraine','United Kingdom','Vatican City'],\n    'Asia': ['Armenia','Azerbaijan','Bahrain','Bangladesh','Bhutan','Brunei', 'Cambodia','China','Cyprus','Georgia','India','Indonesia','Iran','Iraq','Israel', 'Japan','Jordan','Kazakhstan','Kuwait','Kyrgyzstan','Laos','Lebanon','Malaysia','Maldives','Mongolia','Myanmar','Nepal','North Korea','Oman','Pakistan','Palestine','Philippines','Qatar','Russia','Saudi Arabia','Singapore','South Korea','Sri Lanka','Syria','Taiwan','Tajikistan','Thailand','Timor Leste','Turkey','Turkmenistan','United Arab Emirates','Uzbekistan','Vietnam','Yemen'],\n}\n  \nexport const allCountries: string[] = [\n    'Algeria','Angola','Benin','Botswana','Burkina Faso','Burundi','Cabo Verde','Cameroon','Central African Republic','Chad','Comoros','Democratic Republic of the Congo','Republic of the Congo','Cote d\\'Ivoire','Djibouti','Egypt','Equatorial Guinea','Eritrea','Ethiopia','Gabon','Gambia','Ghana','Guinea','Guinea Bissau','Kenya','Lesotho','Liberia','Libya','Madagascar','Malawi','Mali','Mauritania','Mauritius','Morocco','Mozambique','Namibia','Niger','Nigeria','Rwanda','Sao Tome and Principe','Senegal','Seychelles','Sierra Leone','Somalia','South Africa','South Sudan','Sudan','Swaziland','Tanzania','Togo','Tunisia','Uganda','Zambia','Zimbabwe',\n    'Antigua and Barbuda','Bahamas','Barbados','Belize','Canada','Costa Rica','Cuba','Dominica','Dominican Republic','El Salvador','Grenada','Guatemala','Haiti','Honduras','Jamaica','Mexico','Nicaragua','Panama', 'Puerto Rico', 'Saint Kitts and Nevis','Saint Lucia','Saint Vincent and the Grenadines','Trinidad and Tobago','USA',\n    'Argentina', 'Bolivia','Brazil','Chile','Colombia','Ecuador','Guyana','Paraguay','Peru','Suriname','Uruguay','Venezuela',\n    'Albania','Andorra','Armenia','Austria','Azerbaijan','Belarus','Belgium','Bosnia and Herzegovina','Bulgaria','Croatia','Cyprus','Czech Republic','Denmark','Estonia','Finland','France','Georgia','Germany','Greece','Iceland','Ireland','Italy','Kazakhstan','Kosovo','Latvia','Liechtenstein','Lithuania','Luxembourg','Macedonia','Malta','Moldova','Monaco','Montenegro','Netherlands','Norway','Poland','Portugal','Romania','Russia','San Marino','Serbia','Slovakia','Slovenia','Spain','Sweden','Switzerland','Turkey','Ukraine','United Kingdom','Vatican City',\n    'Armenia','Azerbaijan','Bahrain','Bangladesh','Bhutan','Brunei', 'Cambodia','China','Cyprus','Georgia','India','Indonesia','Iran','Iraq','Israel', 'Japan','Jordan','Kazakhstan','Kuwait','Kyrgyzstan','Laos','Lebanon','Malaysia','Maldives','Mongolia','Myanmar','Nepal','North Korea','Oman','Pakistan','Palestine','Philippines','Qatar','Russia','Saudi Arabia','Singapore','South Korea','Sri Lanka','Syria','Taiwan','Tajikistan','Thailand','Timor Leste','Turkey','Turkmenistan','United Arab Emirates','Uzbekistan','Vietnam','Yemen',\n]\n\nexport const statesArray = [\n    \"Alaska\",\n    \"Alabama\",\n    \"Arkansas\",\n    \"American Samoa\",\n    \"Arizona\",\n    \"California\",\n    \"Colorado\",\n    \"Connecticut\",\n    \"District of Columbia\",\n    \"Delaware\",\n    \"Florida\",\n    \"Georgia\",\n    \"Guam\",\n    \"Hawaii\",\n    \"Iowa\",\n    \"Idaho\",\n    \"Illinois\",\n    \"Indiana\",\n    \"Kansas\",\n    \"Kentucky\",\n    \"Louisiana\",\n    \"Massachusetts\",\n    \"Maryland\",\n    \"Maine\",\n    \"Michigan\",\n    \"Minnesota\",\n    \"Missouri\",\n    \"Mississippi\",\n    \"Montana\",\n    \"North Carolina\",\n    \" North Dakota\",\n    \"Nebraska\",\n    \"New Hampshire\",\n    \"New Jersey\",\n    \"New Mexico\",\n    \"Nevada\",\n    \"New York\",\n    \"Ohio\",\n    \"Oklahoma\",\n    \"Oregon\",\n    \"Pennsylvania\",\n    \"Puerto Rico\",\n    \"Rhode Island\",\n    \"South Carolina\",\n    \"South Dakota\",\n    \"Tennessee\",\n    \"Texas\",\n    \"Utah\",\n    \"Virginia\",\n    \"Virgin Islands\",\n    \"Vermont\",\n    \"Washington\",\n    \"Wisconsin\",\n    \"West Virginia\",\n    \"Wyoming\"\n];\n\n","import React, { Component, ChangeEvent, FormEvent } from 'react';\nimport './FormContainer.css';\nimport { TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport { allCountries, statesArray } from './countries';\n\nconst inputsData = [\n  {id: 'country', label: 'Country'},\n  {id: 'state', label: 'State'},\n];\n\ninterface State {\n  country: string;\n  state: string;\n  [key: string]: string;\n}\n\ninterface Props {\n  onSubmitForm: (e: FormEvent<HTMLFormElement>, filterState: {country: string; state: string;}) => void;\n  submitted: boolean;\n}\n\nclass Form extends Component<Props, State> {\n  constructor(props: any){\n    super(props);\n\n    this.state = {\n      country: '',\n      state: '',\n    }\n  }\n\n  onChangeInput = (event: ChangeEvent<HTMLInputElement>, id: string):void => {\n    this.setState({\n      ...this.state,\n      [id]: event.target.value,\n    });\n  }\n\n  onChangeSelect = (event: ChangeEvent<{}>, value:string |  null, id: string):void => {\n    if (value) {\n      if (id === \"country\") {\n        this.setState({\n          ...this.state,\n          [id]: value,\n          state: \"\",\n        });\n      } else {\n        this.setState({\n          ...this.state,\n          [id]: value,\n        });\n      }\n    }\n  }\n\n  render() {\n\n    let inputsHTML: JSX.Element[] = [];\n    \n    inputsData.forEach(data => {\n      if (data.id === \"state\" && this.state.country !== \"USA\") return;\n      else {\n        inputsHTML.push(\n          <div className=\"autocomplete\">\n            <Autocomplete\n              id=\"combo-box-demo\"\n              options={data.id === \"state\" ? statesArray : allCountries.sort()}\n              onChange={(event: ChangeEvent<{}>, value: string | null) => this.onChangeSelect(event, value, data.id)}\n              renderInput={(params) => <TextField {...params} label={data.label} variant=\"outlined\" />}\n              value={this.state[data.id]}\n            />\n          </div>)\n      }\n    })\n\n      return (\n          <div className={`container ${!this.props.submitted && \"defaultPosition\"}`}>\n              <form className={\"form\"} onSubmit={(e) => this.props.onSubmitForm(e, this.state)}>\n                {inputsHTML}\n                <button type=\"submit\" className=\"submit\" disabled={!this.state.country}>Submit</button>                \n              </form>\n              <small>\n                <em style={{marginTop: \"20px\", display: \"block\"}}>API used for data:<a target=\"_blank\" href=\" https://rapidapi.com/astsiatsko/api/coronavirus-monitor\">https://rapidapi.com/astsiatsko/api/coronavirus-monitor</a></em> \n              </small>\n          </div>\n      );\n  }\n}\n\nexport default Form;\n","import React from 'react'\nimport './Result.css';\n\ninterface Props {\n  data: string | undefined | number; \n  label: string;\n}\n\nconst Result:React.FC<Props> = (props) => {\n  console.log(props.label, props.data, typeof props.label)\n  return (\n    <div className=\"Result-container\">\n      <h2 className=\"Result-number\">{props.data}</h2>\n      <h2>{props.label}</h2>\n    </div>\n  )\n}\n\nexport default Result;","import React from 'react'\nimport './DisplayResults.css';\nimport FetchStateInterface from '../../interfaces/FetchStateInterface.interface';\nimport Result from './Result';\n\ninterface Props {\n    fetchState: FetchStateInterface;\n}\n\nconst numberWithCommas = (x: string | undefined) => {\n  if (x) return x.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nconst DisplayResults:React.FC<Props> = (props) => {\n    let deathRatio, recoveredRatio, activeRatio; \n    if (props.fetchState.total_cases && props.fetchState.total_deaths) {\n      deathRatio = parseFloat(props.fetchState.total_deaths.replace(/,/g, '')) / parseFloat(props.fetchState.total_cases.replace(/,/g, '')) * 100;\n      deathRatio = (Math.round(deathRatio * 10) / 10).toFixed(1) + \"%\";\n    }\n    if (props.fetchState.active_cases && props.fetchState.total_cases) {\n      activeRatio = parseFloat(props.fetchState.active_cases.replace(/,/g, '')) / parseFloat(props.fetchState.total_cases.replace(/,/g, '')) * 100;\n      activeRatio = (Math.round(activeRatio * 10) / 10).toFixed(1) + \"%\";\n    } \n    if (props.fetchState.total_recovered && props.fetchState.total_cases) {\n      recoveredRatio = parseFloat(props.fetchState.total_recovered.replace(/,/g, '')) / parseFloat(props.fetchState.total_cases.replace(/,/g, '')) * 100;\n      recoveredRatio = (Math.round(recoveredRatio * 10) / 10).toFixed(1) + \"%\"; (Math.round(5.01 * 10) / 10).toFixed(1)\n    } \n    let stateDeathRatio; \n    if (props.fetchState.death_cases && props.fetchState.cases_number) {\n      stateDeathRatio = parseFloat(props.fetchState.death_cases.replace(/,/g, '')) / parseFloat(props.fetchState.cases_number.replace(/,/g, '')) * 100;\n      stateDeathRatio = (Math.round(stateDeathRatio * 10) / 10).toFixed(1) + \"%\"; (Math.round(5.01 * 10) / 10).toFixed(1)\n    }\n    return (\n        <div>\n          {props.fetchState.activeSearch === \"state\" && \n            <div className=\"displayResultsContainer\">\n              <em>*State numbers not working correctly, DO NOT TRUST DATA</em>\n              <h1>{props.fetchState.state_name}</h1>\n              <small>Cases Updated{props.fetchState.record_date}</small>\n              <br/>\n              <small>Deaths Updated{props.fetchState.death_record_date}</small>\n              <div className=\"resultsContainer\">\n                <div className=\"groupResults\">\n                  <Result data={numberWithCommas(props.fetchState.cases_number)} label=\"Total Cases\" />\n                  <Result data={numberWithCommas(props.fetchState.death_cases)} label=\"Total Deaths\" />\n                </div>\n                <div className=\"groupResults\">\n                  <Result data={stateDeathRatio} label=\"Death Ratio\" />\n                </div>\n              </div>\n          </div>        \n          }\n\n          {props.fetchState.activeSearch === \"country\" && \n            <div className=\"displayResultsContainer\">\n              <h1>{props.fetchState.country_name}</h1>\n              <small>{props.fetchState.record_date}</small>\n              <div className=\"resultsContainer\">\n                <div className=\"groupResults\">\n                  <Result data={props.fetchState.total_cases} label=\"Total Cases\" />\n                  <Result data={props.fetchState.total_deaths} label=\"Total Deaths\" />\n                </div>\n                <div className=\"groupResults\">\n                  <Result data={props.fetchState.active_cases} label=\"Active Cases\" />\n                  <Result data={props.fetchState.total_recovered} label=\"Total Recovered\" />\n                </div>\n                <div className=\"groupResults\">\n                  <Result data={activeRatio} label=\"Active Ratio\" />\n                  <Result data={deathRatio} label=\"Death Ratio\" />\n                  <Result data={recoveredRatio} label=\"Recovered Ratio\" />\n                </div>\n              </div>\n            </div>\n          }\n\n        </div>\n    )\n}\n\nexport default DisplayResults;","import React from 'react'\nimport './SubmittedFormPanel.css';\nimport FetchStateInterface from '../../interfaces/FetchStateInterface.interface';\nimport DisplayResults from '../DisplayResults/DisplayResults';\n\ninterface Props {\n    formState: {\n        country: string;\n        state: string;\n    } | null;\n}\n\nclass SubmittedFormPanel extends React.Component<Props, FetchStateInterface> {\n  constructor(props: any){\n    super(props);\n    // latest_stat_by_country[0].total_cases new_cases active_cases total_death new_deaths total_recovered total_cases_per1m record_date \n    this.state = {\n      activeSearch: \"\",\n\n      state_name: undefined,\n      cases_number: undefined,\n      cases_record_date: undefined,\n      death_cases: undefined,\n      death_record_date: undefined,\n\n      country_name: undefined,\n      total_cases: undefined,\n      new_cases: undefined,\n      active_cases: undefined,\n      total_deaths: undefined,\n      new_deaths: undefined,\n      total_recovered: undefined,\n      total_cases_per1m: undefined,\n      record_date: undefined,\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props){\n    if(nextProps.formState){\n      if (JSON.stringify(this.props) !== JSON.stringify(nextProps.formState)) {\n        const { state, country } = nextProps.formState;\n        if (nextProps.formState.state) {\n          fetch(`https://coronavirus-monitor.p.rapidapi.com/coronavirus/johns_hopkins_latest_usa_statistic_by_state.php?state=${state}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\n                \"x-rapidapi-key\": \"4781cadd8fmsh5bf0d6baa331ad3p1ab429jsnb80237845be3\"\n            }\n          })\n            .then(res => {\n                res.json().then(data => {\n                    console.log(data);\n                    if(data.usa_cases_by_state.length === 0 && data.usa_deaths.length === 0){\n                      alert(\"No results\");\n                      return;\n                    } else {\n                      this.setState({\n                        activeSearch: \"state\",\n\n                        state_name: data.usa_cases_by_state[0].state_name,\n                        cases_number: data.usa_cases_by_state[0].cases_number,\n                        cases_record_date: data.usa_cases_by_state[0].record_date,\n                        death_cases: data.usa_deaths[0].death_cases,\n                        death_record_date: data.usa_deaths[0].record_date,\n                      })\n                    }\n                })\n            })\n            .catch(err => {\n                console.log(err);\n            });\n        } else {\n          fetch(`https://coronavirus-monitor.p.rapidapi.com/coronavirus/latest_stat_by_country.php?country=${country}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\n                \"x-rapidapi-key\": \"4781cadd8fmsh5bf0d6baa331ad3p1ab429jsnb80237845be3\"\n            }\n          })\n            .then(res => {\n              res.json().then(data => {\n                console.log(data);\n                if (data.latest_stat_by_country.length === 0) {\n                  alert(\"No results\");\n                  return;\n                } else {\n                  let latest_stats = data.latest_stat_by_country[0];\n                  console.log('latest', latest_stats.total_deaths, typeof latest_stats.total_deaths);\n                  this.setState({\n                    activeSearch: \"country\",\n\n                    total_cases: latest_stats.total_cases,\n                    new_cases: latest_stats.new_cases,\n                    active_cases: latest_stats.active_cases,\n                    total_deaths: latest_stats.total_deaths,\n                    new_deaths: latest_stats.new_deaths,\n                    record_date: latest_stats.record_date,\n                    total_cases_per1m: latest_stats.total_cases_per1m,\n                    total_recovered: latest_stats.total_recovered,\n                    country_name: latest_stats.country_name,\n                  })\n                }\n              })\n            })\n            .catch(err => {\n                console.log(err);\n            });\n        }\n      }\n    }\n  }\n\n  render(){\n\n      return (\n          <div className=\"tableContainer\">\n              <DisplayResults fetchState={this.state} />\n          </div>\n      )\n  }\n}\n\n\nexport default SubmittedFormPanel;","import React, { FormEvent } from 'react';\nimport './App.css';\nimport Form from './components/Form/FormContainer';\nimport SubmittedFormPanel from './components/SubmittedFormPanel/SubmittedFormPanel';\n\ninterface FormState {\n  country: string;\n  state: string;\n}\n\ninterface State {\n  submitted: boolean;\n  formState: FormState;\n}\n\nclass App extends React.Component<{}, State> {\n  constructor(props: any){\n    super(props);\n\n    this.state = {\n      submitted: false,\n      formState: {\n        country: '',\n        state: '',      \n      },\n    }\n  }\n\n  onSubmitForm = (e: FormEvent<HTMLFormElement>, formState: {country: string; state: string;}) => {\n    e.preventDefault();\n    console.log('formstate', formState)\n    this.setState({\n      submitted: true,\n      formState: formState,\n    });\n    console.log(formState, 'formState');\n  } \n  render(){\n    let other = false;\n    if(this.state.formState.state === \"other\" || this.state.formState.country === \"other\"){\n      other = true;\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n            Coronavirus World Tracker\n        </header>\n        <div className=\"App-body\">\n          {Object.keys(this.state.formState) && <SubmittedFormPanel formState={!other ? this.state.formState : null} />}\n          <Form onSubmitForm={this.onSubmitForm} submitted={this.state.submitted} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}